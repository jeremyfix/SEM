calcul_couplage_deplacement defini dans Modules/Couplage.f90, utilise dans drive_sem.f90

calcul_couplage_force defini dans Modules/Couplage.f90, utilise dans drive_sem.f90

calcul_couplage_masse defini dans Modules/Couplage.f90, utilise dans drive_sem.f90

get_Forces_Elem2Edge defini dans get_Forces_Elem2Edge, appele par Newmark.f90, ajout des forces de la maille aux forces de l'arete. Utilisation de orient_edges

global_numbering permet la definition de TDomain%specel(n)%Iglobnum(i,j,k) qui contient la numerotation globale de tous les ddl (points de gauss lobatto)

save_checkpoint gere l'ecriture de la vitesse, de Displ, epsilonvol, R_vol_, R_xx_, R_yy_,epsilondev_xx_, evt de Veloc1, Veloc2, Veloc3, Diagonal_Stress, Residual_Stress

savefield

Comm_Forces_Face appele par Newmark.f90. Utilise scomm%Orient_Faces

Comm_Mass_Face appele par define_arrays.f90

WELEGL definit en sortie les poids des points GLL, pour une direction donnee (soit x, y, ou z), en utilisant les formules de quadrature


ZELEGL definit en sortie les positions des points GLL, pour une direction donnee (soit x, y, ou z)
----------------------------------------------------------------------------
----------------------------------------------------------------------------
----------------------------------------------------------------------------

Tdomain%logicD%Save_Surface = de type logical pour dire si on sauve une surface ou pas, defini dans read_input.f90 (lecture de input.spec), utilise dans savefield.f90

Tdomain%specel(n)%iglobnum(0:ngllx-1, 0:nglly-1, 0:ngllz-1) alloue et defini dans global_numbering.f90, utilise dans Receiverposition.f90, Sourceposition.f90, courant.f90, deallocate_domain.f90, define_arrays.f90, global_numbering.f90, shape27.f90, shape8.f90, Modules/Element.f90, 
iglobnum<= (ngllx-2)*(nglly-2)*(ngllz-2)*Tdomain%n_elem
On commence par les i, puis j puis k (attention boucle de 1:ngll-2) puis on passe a l'element suivant. Il manque les aretes et les sommets. iglobnum contient la numerotation globale des degres de liberte. (Points de Gauss Lobatto)

Tdomain%sFace(n)%iglobnum_face - alloue - Iglobnum_Face(1:ngllx-2,1:nglly-2)) - et defini dans global_numbering.f90, utilise dans shape8.f90

Tdomain%sFace(nf)%FaceNum(0:3) alloue dans global_numbering.f90, semble inutile, declare dans Modules/Face.f90

Tdomain%sEdge(ne)%EdgeNum(0:1) alloue dans global_numbering.f90, semble inutile, declare dans Modules/Face.f90

Tdomain%sEdge(n)%Iglobnum_Edge(1:ngllx-2)

Tdomain%specel(n)%Orient_faces (dependant de specel(n) )de dimension (0:5): lu depuis le fichier de maillage via read_input.f90, utilise dans PML_def.f90, getPMLpred_f2el.f90, get_Displ_Face2Elem.f90, get_Forces_Elem2Face.f90, get_Mass_Elem2Face.f90, global_numbering.f90, Modules/Element.f90.  Tableau donnant l'orientation des faces par element.

Tdomain%sPlaneW%pFace(nf)%Orient=defini dans read_input.f90, utilise dans Newmark.f90, define_arrays.f90, global_numbering.f90, , shape8.f90

Tdomain%specel(n)%Orient_edges (dependant de specel(n) ): defini dans read_input.f90 (via lecture du fichier maillage), utilise dans getPMLpred_e2el.f90, get_Displ_Edge2Elem.f90, get_Forces_Elem2Edge.f90, get_Mass_Elem2Edge.f90, global_numbering.f90. Vaut 0 ou 1.

Tdomain%specel(n)%Near_Edges(0:11): lu dans  read_input.f90, utilise dans Newmark.f90, PML_def.f90, define_arrays.f90, getPMLpred_e2el.f90, get_Displ_Edge2Elem.f90, get_Forces_Elem2Edge.f90, get_Mass_Elem2Edge.f90, global_numbering.f90. Contient les numeros des aretes

Tdomain%sComm(n)%Orient_faces (dependant de sComm(n) ): defini dans read_input.f90 (via lecture du fichier de maillage), utilise dans Comm_Forces_Face.f90, Comm_Mass_Face.f90

Tdomain%sComm(n)%nb_faces: defini dans read_input.f90 (via lecture du fichier de maillage), utilise dans Comm_Forces_Face.f90, Comm_Mass_Face.f90,Newmark.f90,  allocate_domain.f90, define_arrays.f90

Tdomain%sComm(n)%nb_edges: defini dans read_input.f90 (via lecture du fichier de maillage), utilise dans Comm_Forces_Edge.f90, Comm_Mass_Edge.f90,Newmark.f90,  allocate_domain.f90, define_arrays.f90

Tdomain%sComm(n)%nb_vertices: defini dans read_input.f90 (via lecture du fichier de maillage), utilise dans Comm_Forces_Vertex.f90, Comm_Mass_Vertex.f90,Newmark.f90,  allocate_domain.f90, define_arrays.f90

Tdomain%sComm(n)%nb_vertices_neu: defini dans read_input.f90 (via lecture du fichier de maillage), utilise dans allocate_domain.f90, define_arrays.f90

Tdomain%sSubDomain(i)%{Down,Forward,Left}: Booleen si PML est en-dessous (z=0), devant(y=0), a gauche(x=0). Defini dans read_input.f90 via lecture du fichier materiaux. Utilise dans define_arrays.f90 (Define_arrays), PML_def.f90 (PML_definition).

Tdomain%sSubDomain(i)%Dt: pas de temps pour le materiau i

Tdomain%sSubDomain(i)%GLLc{x,y,z}: defini dans compute_GLL.f90 apres appel aux routines de Funaro (ZELEGL.f90), utilise dans ReceiverPosition.f90, SourcePosition.f90, deallocate_domain.f90, double_couple.f90, shape27.f90, shape8.f90. Contient les positions des points GLL.

Tdomain%sSubDomain(i)%GLLw{x,y,z}: defini dans compute_GLL.f90 apres appel a la routine de Funaro (WELEGL.f90). Contient les poids des points GLL.

Tdomain%sSubDomain(i)%NGLL{x,y,z}: defini dans read_input.f90 (via lecture dans le fichier materiau elastic_n4.hetero), utilise dans compute_GLL.f90

Tdomain%sSubDomain(i)%P{x,y,z}: pour les PML. Defini dans read_input.f90 via lecture du fichier materiaux. Utilise dans define_arrays.f90 (Define_arrays), PML_def.f90 (PML_definition). Booleen si PML en x, y ou z.

Tdomain%specel(n)%Lambda(i,jk) = coefficient de Lame. Variable a l'interieur d'une maille? Alloue dans allocate_domain.f90, modifie dans set_attenuation_aniso_param.f90

Tdomain%specel(n)%ngllx{y,z}: defini dans read_input.f90, PML_def.f90
ReceiverPosition.f90, allocate_domain.f90, courant.f90, define_arrays.f90, getPMLpred_e2el.f90, getPMLpred_f2el.f90, getPMLpred_v2el.f90, get_Displ_Edge2Elem.f90, get_Displ_Face2Elem.f90, get_Displ_Vertex2Elem.f90, get_Forces_Elem2Edge.f90, get_Forces_Elem2Face.f90, get_Forces_Elem2Vertex.f90, get_Mass_Elem2Edge.f90, get_Mass_Elem2Face.f90, get_Mass_Elem2Vertex.f90, global_numbering.f90, Newmark.f90, read_restart.f90, save_checkpoint.f90, set_attenuation_aniso_param.f90, set_attenuation_param.f90, shape27.f90, shape8.f90

Tdomain%material_file: defini dans read_input.f90, via lecture a input.spec

sFace(nf)%ngll1,ngll2: nb de points de Gauss dans la direction x? defini dans read_input.f90, utilise dans Comm_Forces_Face.f90, Comm_Mass_Face.f90, Newmark.f90, PML_def.f90, allocate_domain.f90, define_arrays.f90, getPMLpred_f2el.f90, get_Displ_Face2Elem.f90, get_Forces_Elem2Face.f90, global_numbering.f90,  read_restart.f90, save_checkpoint.f90, Modules/Face.f90

Tdomain%specel(n)%Near_Faces(i): lu dans  read_input.f90, utilise dans Newmark.f90, PML_def.f90, define_arrays.f90, getPMLpred_f2el.f90, get_Displ_Face2Elem.f90, get_Forces_Elem2Face.f90, get_Mass_Elem2Face.f90, global_numbering.f90, Modules/Element.f90. Tableau donnant le numero des faces par element.

Tdomain%n_nodes: nb de noeuds par elements

curve - flag pour elements curvilignes, ne figure pas dans SEM2D - defini dans read_input.f90, utilise dans Newmark.f90, Receiverposition.f90,  Sourceposition.f90, allocate_domain.f90,  double_couple.f90,  

Tdomain%mesh_file: mesh4spec. Attention au . !!

Tdomain%Coord_nodes: affecte dans read_input.f90, utilise dans ReceiverPosition.f90, SourcePosition.f90, deallocate_domain.f90, read_input.f90, shape27.f90, shape8.f90. Coordonnees des noeuds

Tdomain%GlobCoord= defini dans shape8.f90 et shape27.f90, utilise dans ReceiverPosition.f90, SourcePosition.f90, courant.f90, deallocate_domain.f90, define_arrays.f90. Contient les coordonnees des points de Gauss-Lobatto?

Tdomain%n_glob_points = defini dans global_numbering, utilise dans shape8.f90, shape27.f90 pour l'allocation de Tdomain%GlobCoord


Tdomain%sComm(n)%Take: alloue dans allocate_domain.f90, utilise dans Comm_Mass_Edge.f90, Comm_Mass_Face.f90, Comm_Mass_Vertex.f90, define_arrays.f90, 

Tdomain%sComm(n)%GiveForces: defini dans Newmark.f90, utilise dans Comm_Mass_Edge.f90, Comm_Mass_Face.f90, Comm_Mass_Vertex.f90 = Forces aux faces, aretes et sommets

Tdomain%sComm(n)%TakeForces:

Tdomain%sComm(n)%TakePml:

Tdomain%TimeD%dtmin defini dans read_input.f90

rg: defini dans drive_sem.f90: rang du processeur courant. Defini via appel a mpi_comm_rank(mpi_comm_world, rg, code)



Veloc defini pour les sommets, les faces, les aretes
Veloc(:,:,:,0) est la premiere composante en x
Veloc(:,:,:,2) est la composante en z

Veloc1, Veloc2, Veloc3 ??
----------------------------------------------------------------------------
----------------------------------------------------------------------------
----------------------------------------------------------------------------
ARBORESCENCE
----------------------------------------------------------------------------
----------------------------------------------------------------------------
----------------------------------------------------------------------------

drive_sem est le prog principal
drive_sem gere l'initialisation MPI
drive_sem appelle read_input
si Tdomain%logicD%super_object_local_present=.true. et Tdomain%super_object_type == "P" drive_sem appelle define_planew_properties
si Tdomain%logicD%neumann_local_present=.true. drive_sem appelle define_neu_properties
drive_sem appelle compute_GLL
drive_sem appelle global_numbering
si Tdomain%n_nodes == 8 drive_sem appelle shape8
   shape8 appelle invert3d
si Tdomain%n_nodes == 20 ARRET
si Tdomain%n_nodes == 27 drive_sem appelle shape27
autres appels (PML)
si Tdomain%logicD%any_source == .true. 
	drive_sem appelle SourcePosition
	drive_sem appelle double_couple
	drive_sem appelle def_timefunc

drive_sem appelle allocate_domain
drive_sem appelle define_arrays
drive_sem appelle compute_Courant
BOUCLE EN TEMPS
FIN BOUCLE EN TEMPS

drive_sem
	read_input
	define_planew_properties (si Tdomain%logicD%super_object_local_present=.true. et Tdomain%super_object_type == "P")
	define_neu_properties (si Tdomain%logicD%neumann_local_present=.true.)
	compute_GLL
	global_numbering
	shape8 (si Tdomain%n_nodes == 8)
		invert3d
	shape27 (si Tdomain%n_nodes == 27)
	PML_definition (si Tdomain%any_PML)
	SourcePosition (si Tdomain%logicD%any_source == .true. )
	double_couple (si Tdomain%logicD%any_source == .true. )
	def_timefunc (si Tdomain%logicD%any_source == .true. )
	allocate_domain
	define_arrays
	compute_Courant
	initialisation_couplage si #COUPLAGE
		MPI_SEND dtmin au Superviseur
		MPI_RECV m_nb_point_de_couplage du Superviseur
		MPI_RECV m_numMaille, numFace, pos_proj, du Superviseur
		MPI_GATHERV Nbface a tous les procs Sem
		MPI_BCAST de NBfacetotal a tous les procs Sem
		MPI_RECV des numer des face
		ordonne_face_couplage
		MPI_SCATTERV de m_position_face, m_position_acol, m_position_idiag, m_imat
		MPI_SEND NL, NC depuis 0
		MPI_RECV NL, NC de 0
		MPI_AllReduce Ngauss
		MPI_SEND m_gl_Ngauss, MaxNgparface, MaxNgpardir,  gl_ndim_stock au Superviseur
		MPI_SEND Nbface, MaxNgparFace,  MaxNgpardir au Superviseur		
		MPI_SEND NL, NC au Superviseur
		MPI_SEND au Superviseur ngll1, ngll2, m_imat
		MPI_RECV iter_reprise, gestion_gravite, duree_simulation_mka3d du Superviseur
	read_restart si run_restart
	read_capteur (si Capteur)
	BOUCLE EN TEMPS
	calcul_couplage_masse si #COUPLAGE et ntime==0
		MPI_RECV de comm_couplage%m_masse
		MPI_SEND de comm_couplage%ngll1, comm_couplage%ngll2, comm_couplage%m_imat, vecB
		MPI_RECV de comm_couplage%m_masse_impose
	calcul_couplage_force si #COUPLAGE et ntime>0
		MPI_RECV de comm_couplage%m_force
		MPI_SEND de comm_couplage%ngll1, comm_couplage%ngll2, comm_couplage%m_imat, vecB
		MPI_RECV de comm_couplage%m_force_impose
	Newmark
		Prediction_Elem_Veloc (si non PML)	
		get_PMLprediction_v2el  (si PML)	
 		get_PMLprediction_e2el (si PML)	
		get_PMLprediction_f2el (si PML)	
		Prediction_Face_Veloc
		Prediction_Edge_Veloc
		Prediction_Vertex_Veloc
		get_Displ_Face2Elem
	        get_Displ_Edge2Elem
		get_Displ_Vertex2Elem
		forces_int
		compute_InternalForces_PML_Elem
		get_Forces_Elem2Face
		get_Forces_Elem2Edge
		get_Forces_Elem2Vertex
		Correction_Elem_Veloc
		Correction_Face_Veloc
		Correction_Edge_Veloc
		Correction_Vertex_Veloc
	MPI_RECV sortie depuis Superviseur si COUPLAGE
	evalueSortieCapteur (si Capteur)
	savefield
	savetrace
	save_checkpoint (si NON COUPLAGE)
	save_capteur
	calcul_couplage_deplacement si #COUPLAGE
		MPI_SEND de comm_couplage%m_depla au Superviseur
	MPI_SEND de finSem au Superviseur
	MPI_SEND interrupt au Superviseur
	MPI_BCAST interrupt a tous les procs Sem
	MPI_RECV protection du Superviseur
	save_checkpoint 
	FIN BOUCLE EN TEMPS
	deallocate_domain
	mpi_finalize
----------------------------------------------------------------------------
----------------------------------------------------------------------------
ORDRE DE LECTURE de mesh_file
----------------------------------------------------------------------------
----------------------------------------------------------------------------
Tdomain%n_dime
Tdomain%n_glob_nodes (local a chaque proc?)
Tdomain%curve
Tdomain%Coord_nodes
Tdomain%n_elem
Tdomain%n_mat
Tdomain%specel(i)%mat_index
Tdomain%n_nodes
Tdomain%specel(i)%Control_Nodes(1:8,:)
Tdomain%n_face
Tdomain%specel(i)%Near_Faces(0:5)
Tdomain%specel(i)%Orient_Faces(0:5)
Tdomain%n_edge
Tdomain%specel(i)%Near_Edges(0:11)
Tdomain%specel(i)%Orient_Edges(0:11)
Tdomain%n_vertex
Tdomain%specel(i)%Near_Vertices(0:7)
ligne vide
ligne vide
Tdomain%logicD%super_object_local_present
	ligne vide
	Tdomain%sPlaneW%n_faces
	Tdomain%sPlaneW%pFace(nf)%Near_Edges(0:3)
	Tdomain%sPlaneW%pFace(nf)%Orient_Edges(0:3)
	ligne vide
	Tdomain%sPlaneW%pFace(nf)%Near_Vertices(0:3)
	ligne vide
	ligne vide
	 Tdomain%sPlaneW%pFace(nf)%Face_UP, Tdomain%sPlaneW%pFace(nf)%Face_DOWN, Tdomain%sPlaneW%pFace(nf)%Orient
	ligne vide
	 Tdomain%sPlaneW%n_edges
	Tdomain%sPlaneW%pEdge(ne)%Edge_UP, Tdomain%sPlaneW%pEdge(ne)%Edge_DOWN, Tdomain%sPlaneW%pEdge(ne)%Orient
	ligne vide 
	Tdomain%sPlaneW%n_vertices
	Tdomain%sPlaneW%pVertex(nv)%Vertex_UP, Tdomain%sPlaneW%pVertex(nv)%Vertex_DOWN
ligne vide
ligne vide
Tdomain%logicD%Neumann_local_present
	ligne vide
	Tdomain%sNeu%n_faces
	ligne vide
	Tdomain%sNeu%nFace(nf)%Near_Edges(0:3)
	Tdomain%sNeu%nFace(nf)%Orient_Edges(0:3)
	ligne vide
	Tdomain%sNeu%nFace(nf)%Near_Vertices(0:3)
	ligne vide
	ligne vide
	Tdomain%sNeu%nFace(nf)%Face
	ligne vide
	Tdomain%sNeu%n_edges
	Tdomain%sNeu%nEdge(ne)%Edge
	ligne vide
	Tdomain%sNeu%n_vertices
	Tdomain%sNeu%nVertex(nv)%Vertex
ligne vide
Tdomain%n_proc
Boucle sur le nb de procs
Tdomain%sComm(i)%nb_faces (nb de faces en commun entre le proc i et le proc courant), Tdomain%sComm(i)%nb_edges, Tdomain%sComm(i)%nb_vertices, Tdomain%sComm(i)%nb_edges_so, Tdomain%sComm(i)%nb_vertices_so, Tdomain%sComm(i)%nb_edges_neu, Tdomain%sComm(i)%nb_vertices_neu 
si Tdomain%sComm(i)%nb_faces>0
	 Tdomain%sComm(i)%faces(j),Tdomain%sComm(i)%orient_faces(j) (dans quelle numerotation, celle du processeur courant ou celle de l'autre processeur?)
si Tdomain%sComm(i)%nb_edges>0
	 Tdomain%sComm(i)%edges(j),Tdomain%sComm(i)%orient_edges(j)
si Tdomain%sComm(i)%nb_vertices>0
      Tdomain%sComm(i)%vertices(j)
si Tdomain%sComm(i)%nb_edges_so>0
     Tdomain%sComm(i)%edges_SO(j),Tdomain%sComm(i)%orient_edges_SO(j)
si Tdomain%sComm(i)%nb_vertices_so>0
	 Tdomain%sComm(i)%vertices_SO(j)
si Tdomain%sComm(i)%nb_edges_neu>0
	 Tdomain%sComm(i)%edges_Neu(j),Tdomain%sComm(i)%orient_edges_Neu(j)
si Tdomain%sComm(i)%nb_vertices_neu>0
	 Tdomain%sComm(i)%vertices_Neu(j)
ligne vide
ligne vide
Tdomain%logicD%Save_Surface
si Tdomain%logicD%Save_Surface=.true.
	Tdomain%sSurf%n_vertices
	Tdomain%sSurf%nVertex(nv)%Vertex

----------------------------------------------------------------------------
----------------------------------------------------------------------------
ORDRE DE LECTURE du fichier materiau
----------------------------------------------------------------------------
----------------------------------------------------------------------------
 Tdomain%n_mat
Tdomain%sSubDomain(i)%material_type, Tdomain%sSubDomain(i)%Pspeed, Tdomain%sSubDomain(i)%Sspeed, Tdomain%sSubDomain(i)%dDensity, &
Tdomain%sSubDomain(i)%NGLLx, Tdomain%sSubDomain(i)%NGLLy, Tdomain%sSubDomain(i)%NGLLz, &
Tdomain%sSubDomain(i)%Dt, Tdomain%sSubDomain(i)%Qpression,  Tdomain%sSubDomain(i)%Qmu


-------------------------------------------------------------------
-------------------------------------------------------------------
SORTIES
Fichiers trace dans les repertoires data/Trace{X,Y,Z}
Fichiers backup dans le repertoire data/SBackup
-------------------------------------------------------------------
-------------------------------------------------------------------
ENTREES
Fichier stations contenant les positions des capteurs
