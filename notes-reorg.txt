.. -*- mode: rst -*-




VALIDATION de SEM3D / SEM2D
===========================

Cas analytique, fonctions de comparaison

Infrastructure
--------------


Utilisation
~~~~~~~~~~~

Lancer en faisant make test ou ./run_test un jeu de test automatisé :

1. Choisir un répertoire de travail

2. Copier ou lier les données d'entrée

3. Si nécessaire générer le maillage et le partitionner

4. Appliquer un paramétrage (changer l'ordre des éléments, la durée de
   simulation, le nb de courant)

5. Lancer le calcul (monoprocesseur ou MPI)

6. Comparer et valider les sorties.

On pourra s'appuyer sur l'environnement créé pour mka3d

Exemple ::

  run_test --rundir /tmp --report /tmp/report --case sem2d/test01 [--all|--prep|--run|--post|--report]
  ** This is run00001
  
  run_test --rundir /tmp --runname=run00002 --category all2D


TESTDIR: definition des tests

RUNDIR : repertoire de lancement des tests

REPORTDIR : repertoire de generation du rapport


Structure d'un cas
~~~~~~~~~~~~~~~~~~

Arborescence ::

  TESTDIR/group/casename
  casename : Contient le Nom du cas. Fichier utilise pour detecter si un repertoire contient un test
  doc/description.txt : description du/des cas de calcul
  doc/test_nnnn.txt : description du resultat attendu nnnn
  prep_test : (script) preparation du cas dans rundir
  run_case  : (script) lancement des cas de calcul
  run_tests : (script) lancement des verifications : 
  # Le reste est libre mais on pourra avoir:
  case01/
       input.spec
       material.input
       sem/*
       res/
       mesh.xmf # egalement possible de creer a la volee
       mesh.h5

Des scripts d'exemples seront fournis pour des cas standard de
prep_test, run_case, run_tests

::

  RUNDIR/run00001/casename
     case_nn/
       input.spec
       material.input
       sem/*
       res/
       mesh.xmf/mesh.h5

::

  REPORTDIR/run00001/report
     html/
     pdf/

::

  REPORTDIR/run00001/casename
      version  : contient la version git
      status : prep|run|post
      report/   : contient la sortie texte (rst)
         summary.txt : contient un recapitulatif du resultat du test
         result_nnnn.txt : contient le resultat du test
         figs/ : contient les figures generees
      timeinfo : par cas de calcul : une ligne avec ellapsed time et si possible (mono) cputime/rss ...
      results.txt : contient une ligne OK/NOK/NA par test

Configuration
~~~~~~~~~~~~~

Les scripts ``prep_test``, ̀`run_case`` et ``run_tests`` ont besoin de connaître
le chemin vers les exécutables à utiliser.

Plusieurs méthodes sont possibles :

- le script peut utiliser l'exécutable qu'il trouve dans l'environnement (déconseillé)

- on peut fournir les options ``--builddir`` et ``--srcdir`` qui seront passées dans l'environnement avant le
  lancement du script

- on peut spécifier un fichier de configuration qui sera copié dans ``rundir``. Ce fichier
  de configuration utilise la syntax `json`_ et certaines variables sont reconnues et passées
  dans l'environnement.

  Exemple ::

    # -*- mode: json -*-
    # configuration tests
    { 
      "ENV" : { "BUILDDIR" : "/home/abcd/build", },
      "threshold" : 1.001,
    }


Librairie de support Python
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Pour faciliter l'écriture des scripts de tests, une librairie de
support en Python a été développée.

Exemples :

- ``prep_test`` : copie d'un répertoire de CAS dans ̀`RUNDIR`` ::

    XXX




Interface des scripts
~~~~~~~~~~~~~~~~~~~~~

Les scripts situe dans le repertoire du cas sont éxécutés par le framework avec une
interface spécifique ::

  prep_test TESTDIR RUNDIR REPORTDIR runNNN casename
  run_case  TESTDIR RUNDIR REPORTDIR runNNN casename
  run_tests TESTDIR RUNDIR REPORTDIR runNNN casename

Les 3 scripts seront toujours exécutés dans cet ordre, mais pas forcément à la suite.

Les répertoires RUNDIR et REPORTDIR seront créés avant l'exécution ainsi que l'arborescence
spécifiée ci-dessous ::

   RUNDIR/runNNN/casename/
   REPORTDIR/runNNN/report
   REPORTDIR/runNNN/casename
   REPORTDIR/runNNN/casename/report
   REPORTDIR/runNNN/casename/report/figures

Le rôle de chaque script est le suivant :

- ``prep_test`` préparer l'environnement de test : créer dans RUNDIR/runNNN/casename les répertoire
  qui vont être utilisé pour le lancement des calculs, si il y a des opérations lente de création
  de maillage, cela pourra être effectué ici.

  Il est possible que ``runNNN`` soit différent entre ``prep_test`` et ``run_case``. Le framework se chargera
  de faire la copie ou de créer les liens symboliques entre les répertoires.

- ``run_case`` : C'est le lancement du ou des cas de calcul proprement dit. Le fait de séparer les trois
  étapes permet de laisser à run_case le choix de soumettre des cas de calcul à un gestionnaire batch
  et de laisser le rapport s'effectuer plus tard.

  A la fin des calculs, le script ou un des scripts batch lancés, doit créer le fichier :
  ``RUNDIR/runNNN/casename/done``

- ``run_tests`` : une fois les cas de calcul effectués, ce script est lancé pour généré le résultat
  des tests. Il doit créer l'ensemble des fichiers de ``REPORTDIR/runNNN/casename``


Couverture des tests
--------------------

Modélisation de la source :

- pulse

- moment (explo, cisaillement, ...)

- contenu fréquentiel,

- position dans la maille source (bord, centre)

- source entretenue pour comparaison avec Helmoltz

Propagation :

- solution analytique,

- bords libres

- bords absorbants

- cas limites de Vp/Vs

- Propagation avec maillage raffiné / déformé

- Propagation sur NNN longueurs d'ondes, etude dispersion/dissipation

Schéma d'intégration :

- Comparaison pour différents nombre de courant

- RK4 ?

Stabilité des PML

Tests des sorties numériques :

- sorties capteur & snapshots

- avec des maillages tordus (tore, moebus

La même chose avec les éléments fluides

La même chose avec protection/reprise en cours de calcul

La même chose sur 1,2,4,NN procs

La même chose en changeant la définition (rotation) de certains hexaèdres du maillage (test orientation/faces)

Après reintroduction schema en temps : comparaison avec differents parametres pour Newmark / RK4

Le minimum pour la prochaine version :

1. Calculer les solutions numériques avec code HERMANN et comparer avec un cas 3D homogène

2. Idem avec 2, 3, 4 couches.

3. Avec ou sans PML





